<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Baidu OPS</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2012-08-01T18:17:56+08:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name>zerd liu</name>
   <email>supersugarcane@126.com</email>
 </author>

 
 <entry>
   <title>一名运维工程师的读书列表</title>
   <link href="http://username.github.com/2012/08/01/ops-book-list"/>
   <updated>2012-08-01T00:00:00+08:00</updated>
   <id>http://username.github.com/2012/08/01/ops-book-list</id>
   <content type="html">&lt;p&gt;做应用运维这一行，读了一些书,从好书里面学到了不少知识。希望这个书单不断变长。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.stackoverflow.com'&gt;stackoverflow&lt;/a&gt;上面列出了一名程序员都应该学习的&lt;a href='http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read?tab=votes#tab-top'&gt;书单&lt;/a&gt;,这是&lt;a href='http://book.douban.com/doulist/1244005/'&gt;中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我把书分为3类：技术， 技术文化， 外延&lt;/p&gt;

&lt;h2 id='id388'&gt;技术文化读本：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1152111/'&gt;程序员修炼之道&lt;/a&gt;里面的思想不仅适合开发，也适合运维。印象最深的是“正交设计”和“K.I.S.S.原则”&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/4163938/'&gt;软件随想录&lt;/a&gt;joel带给你不同的思路，从不同的角度看软件和软件文化另外一本他之前出版的文集&lt;a href='http://book.douban.com/subject/2193777/'&gt;joel谈优秀软件开发方法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/6021440/'&gt;黑客与画家&lt;/a&gt;关于互联网公司和软件的特点；设计；编程语言。java &amp;lt; python &amp;lt; perl &amp;lt; ruby &amp;lt; lisp 给我印象很深，坚定了我学习ruby和了解lisp的信心。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1467587/'&gt;unix编程艺术&lt;/a&gt;在unix平台上工作，但对unix的开发和设计哲学不了解，转而采用windows的方式，做了很多额外的工作而没抓住本质。此书必读。另外近期出版了一本&lt;a href='http://www.amazon.cn/gp/product/B007PYVKLC/ref=oh_details_o01_s00_i00'&gt;linux/unix设计思想&lt;/a&gt;也可以读一读。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/4031959/'&gt;软件开发沉思录&lt;/a&gt;能学到很多新奇的想法：关于“软件开发最后一英里”，ruby，多语言开发，配置文件重构，一键发布，性能测试的探讨一针见血。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.amazon.cn/gp/product/B0048EKQS0/ref=oh_details_o03_s00_i00'&gt;rework&lt;/a&gt;极简的思想，并应用于产品开发和工程实现。非常棒。很多工程师都把简单的问题搞复杂。此书必须要读一读。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1135754/'&gt;你的灯亮着吗？&lt;/a&gt;关于问题的一本书。当中一句话受益匪浅“问题只能转化而不能被解决”。值得反复读。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject_search?search_text=%E6%B8%A9%E4%BC%AF%E6%A0%BC&amp;amp;cat=1003'&gt;杰拉尔德•温伯格(Gerald M.Weinberg)&lt;/a&gt; 的书思想都很深邃，有兴趣可以读一读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id389'&gt;技术上的书籍：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1333125/'&gt;unix超级工具(上/下册)&lt;/a&gt;非常棒。都是老一批骨灰级用户多年经验的结晶。每一个专题都需要反复阅读，并亲身实践。对于刚接触linux的人必须反复研读。才能了解unix设计的要点。读得多了就觉得unix是一个非常优雅的设计。还有一本开源的讲bash的书：&lt;a href='http://tldp.org/LDP/abs/html/'&gt;abs&lt;/a&gt;,bash学习必备的书，讲得很透彻，了解shell，通过shell熟悉linux的运行机制。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/2580604/'&gt;持续集成&lt;/a&gt;敏捷开发的最重要实践之一。软件工程的重要思想。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/6862062/'&gt;持续交付&lt;/a&gt;和上一本书思想一致，更切实与op的实际。一定要从产品研发周期看问题，不能仅看运维。开发和运维剁得越开，运维越是不好做。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1238125/'&gt;unix和linux自动化管理&lt;/a&gt;老牌系统管理员的经验总结。书读得比较早了，印象最深的就是对数据推和拉的分析。还有一点印象比较深，如何设计shell脚本的配置文件。注意体会作者的思路，对问题的权衡。书中也有很多代码片段。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/2154713/'&gt;精通正则表达式&lt;/a&gt;经典。正则是非常美的DSL，perl是所有语言中正则和语言本体结合最紧密，最好用的语言。虽然后来喜欢ruby，但这一点仍然是perl的特色。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/3063982/'&gt;perl最佳实践&lt;/a&gt;如果在用perl，则在写真实的程序之前，一定要读perl的设计很灵活，遵循一定的约束，写出来的代码才能读。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1236944/'&gt;sed和awk&lt;/a&gt;系统管理员必备工具。对awk把对文本一行一行的读取，这样一个大循环内置于工具所体现出来的表述上的简洁，非常震撼。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/1232029/'&gt;C专家编程&lt;/a&gt;非常有趣的一本书。给读者展现了C设计的一些优缺点，如何更好的使用C。对系统底层的理解也能加深。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://product.china-pub.com/196374'&gt;重构&lt;/a&gt;这本书我读过一点，书上的实例亲手操作了一下，非常cool。把code写好，写棒，不容易。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.amazon.cn/mn/detailApp?uid=479-6704744-9217618&amp;amp;ref=YS_TR_6&amp;amp;asin=B005KGBTQ8'&gt;松本行弘的程序世界&lt;/a&gt;了解ruby的设计折中，为何要采取此种class和module的继承机制，block的设计都做了哪些考虑和折中。体会他的思想。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.amazon.cn/Ruby%E5%85%83%E7%BC%96%E7%A8%8B-Paolo-Perrotta/dp/B0073APSCK/ref=pd_sim_b_2'&gt;ruby元编程&lt;/a&gt;信息量比较大。ruby的得体的设计，使它真的非常适合程序员使用。看完元编程后我就深深喜欢ruby了。真的简单，优雅。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id390'&gt;其他读本&lt;/h2&gt;

&lt;p&gt;有益于提升自己能力。在另一个领域的知识能够很好的补充正在从事的专业领域的知识。比如：设计，中医给我的触动比较深。他们背后和unix所体现出来的，差不多。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://book.douban.com/subject/3313363/'&gt;演说之禅&lt;/a&gt;读完这本书，我很少再使用ppt的自带动画。都采用翻页的形式。ppt仅展现更简单的信息。简单就是美。所有讲ppt设计的书，这本最好。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://product.china-pub.com/676957'&gt;走近中医&lt;/a&gt;中医也是一个系统，可以类比unix。每个部分之间的关系紧凑，严谨，并且是辩证的。有利于形成系统思考的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>用Jekyll写技术博客</title>
   <link href="http://username.github.com/2012/07/11/jekyll"/>
   <updated>2012-07-11T00:00:00+08:00</updated>
   <id>http://username.github.com/2012/07/11/jekyll</id>
   <content type="html">&lt;h2 id='id386'&gt;缘由&lt;/h2&gt;

&lt;p&gt;曾经也有过写技术博客的冲动。申请过bloger，msn space，百度空间。但总觉得这些blog如果写一些日常的感受还可以，但总是让人不能专注于写作，很小的编辑框，还要时刻注意换行，稍不注意，显示的格式就不对了。&lt;/p&gt;

&lt;p&gt;直到最近，我在&lt;a href='http://www.yangzhiping.com/tech/writing-space.html'&gt;一篇blog&lt;/a&gt;上知道了－－&lt;a href='http://jekyllbootstrap.com/'&gt;Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;老外写书已经采用编程和项目的方式了, &lt;a href='http://pragprog.com/'&gt;The Pragmatic Bookshelf&lt;/a&gt; 的书都是这么写出来的，通过git做版本管理，通过Rake执行图书排版，甚至通过hudson进行每次提交进行排版。&lt;/p&gt;

&lt;p&gt;Jekyll时ruby的一个项目。允许通过git进行版本管理，托管在github上作为一个项目。并通过静态页面进行访问。&lt;/p&gt;

&lt;h2 id='id387'&gt;使用&lt;/h2&gt;

&lt;p&gt;在github上新建一个repo&lt;/p&gt;

&lt;p&gt;本地写一篇post&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake post title=&amp;quot;Jekyll Intrduction&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在_post目录中完成编辑，使用vim 本地启动server，进行预览&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake preview&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将文章提交到github上。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit
git push&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一篇文章都是一个ruby的.md说明文档，这种文档通过简单的语法书写，比wiki的语法格式还简单，非常适合编辑，可以将注意力集中在写作上，不再分散精力。文章托管在github上，如果是重要一点的内容，可以申请付费的repo，托管私有项目。通过git进行版本管理，不再担心写错，想到哪，写到哪。也方便做备份。&lt;/p&gt;

&lt;p&gt;在Mac OS的黑色终端背景敲下这段文字的感觉真好。&lt;/p&gt;</content>
 </entry>
 
 
</feed>